<style>

    body {
        font: 10px sans-serif;
    }

    .axis path,
    .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }

    .x.axis path {
        display: none;
        font-family: sans-serif;
        font-size: <%= @scale ? @scale * 11 : 11%>px;
    }

    .area {
        fill: steelblue;
    }

</style>
<script type="text/javascript">
    nv.addGraph(function () {
        var chart = nv.models.lineChart();
        //console.info(sinAndCos().toString());
        chart.xAxis
                .axisLabel('Time (ms)')
                .tickFormat(d3.format(',r'));

        chart.yAxis
                .axisLabel('Voltage (v)')
                .tickFormat(d3.format('.02f'));

        d3.select('#chart svg')
                .datum(sinAndCos())
                .transition().duration(500)
                .call(chart);

        nv.utils.windowResize(function () {
            d3.select('#chart svg').call(chart)
        });

        return chart;
    });


    /**************************************
     * Simple test data generator
     */


    function sinAndCos() {
        var sin = [],
                cos = [];

        for (var i = 0; i < 100; i++) {
            sin.push({x: i, y: Math.sin(i / 10)});
            cos.push({x: i, y: .5 * Math.cos(i / 10)});
        }

        return [
            {
                values: sin,
                key: 'Sine Wave',
                color: '#ff7f0e'
            },
            {
                values: cos,
                key: 'Cosine Wave',
                color: '#2ca02c'
            }
        ];
    }

</script>

<script type="text/javascript">
    nv.addGraph(function () {
        var chart = nv.models.lineChart();

        chart.xAxis
                .axisLabel('Time (hours)')
                .tickFormat(d3.format(',r'));

        chart.yAxis
                .axisLabel('Temp (C)')
                .tickFormat(d3.format('.02f'));

        d3.select('#<%=graph_name%>_graph svg')
                .datum(process_it())
                .transition().duration(500)
                .call(chart);

        nv.utils.windowResize(function () {
            d3.select('#<%=graph_name%>_graph svg').call(chart)
        });

        return chart;
    });


    function process_it() {
        var json = '<%= @campbels.to_json.html_safe%>';
        var data = JSON.parse(json);

        var max = [], min = [] , avg = [];
        var parseDate = d3.time.format("%Y-%m-%dT%H:%M:%SZ").parse;

        data.forEach(function (d) {
            max.push({x: d.id, y: d.heat_index_c_max})
            min.push({x: d.id, y: d.heat_index_c_min})
            avg.push({x: d.id, y: d.heat_index_c_avg})
        });

        return [
            {
                values: max,
                key: 'Max',
                color: '#ff7f0e'
            },
            {
                values: min,
                key: 'Min',
                color: '#2ca02c'
            },
            {
                values: avg,
                key: 'Avg',
                color: '#dca02c'
            }
        ];

    }
    ;

</script>
